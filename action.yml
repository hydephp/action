name: 'Build HydePHP Site'
description: 'Build and deploy the HydePHP project'
branding:
  icon: 'box'
  color: 'purple'

inputs:
  debug:
    description: 'Enable debug mode'
    required: false
    default: "false"

  deploy:
    # Pages option requires GitHub the "Build and deployment" source to be set to "GitHub Actions"
    # You must also ensure that GITHUB_TOKEN has permission "id-token: write".
    description: 'Specify what to do with the compiled site. Options are: [artifact, pages]'
    required: true
    default: "artifact"

  upload-artifact:
    description: 'Upload the compiled site as an artifact'
    required: false
    default: "false"

  env-site-name:
    description: 'Set the `SITE_NAME` environment variable'
    required: false
  env-site-url:
    description: 'Set the `SITE_URL` environment variable'
    required: false
  env-torchlight-token:
    description: 'Set the `TORCHLIGHT_TOKEN` environment variable'
    required: false

outputs:
  install-strategy:
    description: 'The install strategy used'
    value: ${{ steps.determine-install-strategy.outputs.install-strategy }}

runs:
  using: "composite"
  steps:
    - name: Validate input
      id: validate-input
      run: |
        if [[ "${{ inputs.deploy }}" != "artifact" ]] && [[ "${{ inputs.deploy }}" != "pages" ]]; then
          echo "Invalid input for deploy: ${{ inputs.deploy }}"
          exit 1
        fi
      shell: bash

    - name: Determine install strategy
      id: determine-install-strategy
      run: |
        if [[ -f composer.json ]]; then
          echo "install-strategy=composer" >> $GITHUB_OUTPUT
        else
          echo "install-strategy=archive" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Print debug information
      if: inputs.debug == 'true'
      run: |
        echo "Debug mode: ${{ inputs.debug }}"
        echo "Deploy option: ${{ inputs.deploy }}"
        echo "Install strategy: ${{ steps.determine-install-strategy.outputs.install-strategy }}"
      shell: bash

    - name: Validate composer.json and composer.lock
      if: steps.determine-install-strategy.outputs.install-strategy == 'composer'
      run: composer validate --strict
      shell: bash

    - name: Cache Composer packages
      id: composer-cache
      if: steps.determine-install-strategy.outputs.install-strategy == 'composer'
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Download latest release
      if: steps.determine-install-strategy.outputs.install-strategy == 'archive'
      run: |
        # Copy all root files to backup directory
        cp -r . ../backup
        # Download latest version of HydePHP
        git clone https://github.com/hydephp/hyde.git ../hyde --depth 1
        # Copy HydePHP files to root
        cp -r ../hyde/* .
        # Remove default pages
        rm _pages/index.blade.php _pages/404.blade.php
        # Copy Backup files to root
        cp -r ../backup/* .
      shell: bash

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-autoloader && composer dump-autoload --quiet
      shell: bash

    - name: Set up environment variables
      run: |
        # If there is a .env.example file, copy it to .env
        if [[ -f .env.example ]]; then
          cp .env.example .env
        fi
      shell: bash

    # Inject environment variables
    - if: inputs.env-site-name != ''
      run: echo "SITE_NAME=${{ inputs.env-site-name }}" >> .env
      shell: bash
    - if: inputs.env-site-url != ''
      run: echo "SITE_URL=${{ inputs.env-site-url }}" >> .env
      shell: bash
    - if: inputs.env-torchlight-token != ''
      run: echo "TORCHLIGHT_TOKEN=${{ inputs.env-torchlight-token }}" >> .env
      shell: bash

    - name: Build the site
      run: php hyde build --no-interaction --ansi
      shell: bash

    - name: Upload artifact
      if: inputs.deploy == 'artifact' || inputs.upload-artifact == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: build
        path: _site # TODO: Get this from the config file in case it's customized

    - name: Setup Pages
      if: inputs.deploy == 'pages'
      uses: actions/configure-pages@v3

    - name: Upload artifact
      if: inputs.deploy == 'pages'
      uses: actions/upload-pages-artifact@v1
      with:
        path: _site # TODO: Get this from the config file in case it's customized

    - name: Deploy to GitHub Pages
      id: pages-deployment
      if: inputs.deploy == 'pages'
      uses: actions/deploy-pages@v1

    # Now that the site is built, there are a few options for deployment.
    # We could push directly to the gh-pages branch, commit files to /docs,
    # or even use the GitHub Pages action to deploy the compiled site.
    # We could also upload the site as an artifact for later use.
